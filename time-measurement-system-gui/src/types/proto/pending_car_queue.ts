// @ts-nocheck
// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "pending_car_queue.proto" (package "has.pendingcarqueue", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UInt32Value } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message has.pendingcarqueue.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string meta = 1;
     */
    meta: string;
}
/**
 * @generated from protobuf message has.pendingcarqueue.InsertedItem
 */
export interface InsertedItem {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string meta = 2;
     */
    meta: string;
}
/**
 * @generated from protobuf message has.pendingcarqueue.CommandReply
 */
export interface CommandReply {
}
/**
 * @generated from protobuf message has.pendingcarqueue.InsertRequest
 */
export interface InsertRequest {
    /**
     * @generated from protobuf field: has.pendingcarqueue.Item item = 1;
     */
    item?: Item;
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value position = 2;
     */
    position?: UInt32Value;
}
/**
 * @generated from protobuf message has.pendingcarqueue.RemoveRequest
 */
export interface RemoveRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message has.pendingcarqueue.UpdateRequest
 */
export interface UpdateRequest {
    /**
     * @generated from protobuf field: has.pendingcarqueue.InsertedItem item = 1;
     */
    item?: InsertedItem;
}
/**
 * @generated from protobuf message has.pendingcarqueue.InsertManyRequest
 */
export interface InsertManyRequest {
    /**
     * @generated from protobuf field: repeated has.pendingcarqueue.Item item = 1;
     */
    item: Item[];
    /**
     * @generated from protobuf field: google.protobuf.UInt32Value position = 2;
     */
    position?: UInt32Value;
}
/**
 * @generated from protobuf message has.pendingcarqueue.RemoveAllRequest
 */
export interface RemoveAllRequest {
}
/**
 * @generated from protobuf message has.pendingcarqueue.ReplaceAllRequest
 */
export interface ReplaceAllRequest {
    /**
     * @generated from protobuf field: repeated has.pendingcarqueue.Item item = 1;
     */
    item: Item[];
}
/**
 * @generated from protobuf message has.pendingcarqueue.ReadAllRequest
 */
export interface ReadAllRequest {
}
/**
 * @generated from protobuf message has.pendingcarqueue.ReadAllReply
 */
export interface ReadAllReply {
    /**
     * @generated from protobuf field: repeated has.pendingcarqueue.InsertedItem item = 1;
     */
    item: InsertedItem[];
}
/**
 * @generated from protobuf message has.pendingcarqueue.SubscribeChangeRequest
 */
export interface SubscribeChangeRequest {
}
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("has.pendingcarqueue.Item", [
            { no: 1, name: "meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { meta: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string meta */ 1:
                    message.meta = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string meta = 1; */
        if (message.meta !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.meta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertedItem$Type extends MessageType<InsertedItem> {
    constructor() {
        super("has.pendingcarqueue.InsertedItem", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InsertedItem>): InsertedItem {
        const message = { id: "", meta: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InsertedItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertedItem): InsertedItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string meta */ 2:
                    message.meta = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertedItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string meta = 2; */
        if (message.meta !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.meta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.InsertedItem
 */
export const InsertedItem = new InsertedItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandReply$Type extends MessageType<CommandReply> {
    constructor() {
        super("has.pendingcarqueue.CommandReply", []);
    }
    create(value?: PartialMessage<CommandReply>): CommandReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandReply): CommandReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.CommandReply
 */
export const CommandReply = new CommandReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertRequest$Type extends MessageType<InsertRequest> {
    constructor() {
        super("has.pendingcarqueue.InsertRequest", [
            { no: 1, name: "item", kind: "message", T: () => Item },
            { no: 2, name: "position", kind: "message", T: () => UInt32Value }
        ]);
    }
    create(value?: PartialMessage<InsertRequest>): InsertRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InsertRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertRequest): InsertRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* has.pendingcarqueue.Item item */ 1:
                    message.item = Item.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* google.protobuf.UInt32Value position */ 2:
                    message.position = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* has.pendingcarqueue.Item item = 1; */
        if (message.item)
            Item.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value position = 2; */
        if (message.position)
            UInt32Value.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.InsertRequest
 */
export const InsertRequest = new InsertRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveRequest$Type extends MessageType<RemoveRequest> {
    constructor() {
        super("has.pendingcarqueue.RemoveRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveRequest>): RemoveRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveRequest): RemoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.RemoveRequest
 */
export const RemoveRequest = new RemoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends MessageType<UpdateRequest> {
    constructor() {
        super("has.pendingcarqueue.UpdateRequest", [
            { no: 1, name: "item", kind: "message", T: () => InsertedItem }
        ]);
    }
    create(value?: PartialMessage<UpdateRequest>): UpdateRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequest): UpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* has.pendingcarqueue.InsertedItem item */ 1:
                    message.item = InsertedItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* has.pendingcarqueue.InsertedItem item = 1; */
        if (message.item)
            InsertedItem.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.UpdateRequest
 */
export const UpdateRequest = new UpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertManyRequest$Type extends MessageType<InsertManyRequest> {
    constructor() {
        super("has.pendingcarqueue.InsertManyRequest", [
            { no: 1, name: "item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 2, name: "position", kind: "message", T: () => UInt32Value }
        ]);
    }
    create(value?: PartialMessage<InsertManyRequest>): InsertManyRequest {
        const message = { item: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InsertManyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertManyRequest): InsertManyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated has.pendingcarqueue.Item item */ 1:
                    message.item.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.UInt32Value position */ 2:
                    message.position = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertManyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated has.pendingcarqueue.Item item = 1; */
        for (let i = 0; i < message.item.length; i++)
            Item.internalBinaryWrite(message.item[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt32Value position = 2; */
        if (message.position)
            UInt32Value.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.InsertManyRequest
 */
export const InsertManyRequest = new InsertManyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAllRequest$Type extends MessageType<RemoveAllRequest> {
    constructor() {
        super("has.pendingcarqueue.RemoveAllRequest", []);
    }
    create(value?: PartialMessage<RemoveAllRequest>): RemoveAllRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAllRequest): RemoveAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.RemoveAllRequest
 */
export const RemoveAllRequest = new RemoveAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplaceAllRequest$Type extends MessageType<ReplaceAllRequest> {
    constructor() {
        super("has.pendingcarqueue.ReplaceAllRequest", [
            { no: 1, name: "item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<ReplaceAllRequest>): ReplaceAllRequest {
        const message = { item: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReplaceAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplaceAllRequest): ReplaceAllRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated has.pendingcarqueue.Item item */ 1:
                    message.item.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplaceAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated has.pendingcarqueue.Item item = 1; */
        for (let i = 0; i < message.item.length; i++)
            Item.internalBinaryWrite(message.item[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.ReplaceAllRequest
 */
export const ReplaceAllRequest = new ReplaceAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadAllRequest$Type extends MessageType<ReadAllRequest> {
    constructor() {
        super("has.pendingcarqueue.ReadAllRequest", []);
    }
    create(value?: PartialMessage<ReadAllRequest>): ReadAllRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadAllRequest): ReadAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReadAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.ReadAllRequest
 */
export const ReadAllRequest = new ReadAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadAllReply$Type extends MessageType<ReadAllReply> {
    constructor() {
        super("has.pendingcarqueue.ReadAllReply", [
            { no: 1, name: "item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InsertedItem }
        ]);
    }
    create(value?: PartialMessage<ReadAllReply>): ReadAllReply {
        const message = { item: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadAllReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadAllReply): ReadAllReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated has.pendingcarqueue.InsertedItem item */ 1:
                    message.item.push(InsertedItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadAllReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated has.pendingcarqueue.InsertedItem item = 1; */
        for (let i = 0; i < message.item.length; i++)
            InsertedItem.internalBinaryWrite(message.item[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.ReadAllReply
 */
export const ReadAllReply = new ReadAllReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChangeRequest$Type extends MessageType<SubscribeChangeRequest> {
    constructor() {
        super("has.pendingcarqueue.SubscribeChangeRequest", []);
    }
    create(value?: PartialMessage<SubscribeChangeRequest>): SubscribeChangeRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChangeRequest): SubscribeChangeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.pendingcarqueue.SubscribeChangeRequest
 */
export const SubscribeChangeRequest = new SubscribeChangeRequest$Type();
/**
 * @generated ServiceType for protobuf service has.pendingcarqueue.PendingCarQueue
 */
export const PendingCarQueue = new ServiceType("has.pendingcarqueue.PendingCarQueue", [
    { name: "Insert", options: {}, I: InsertRequest, O: CommandReply },
    { name: "Remove", options: {}, I: RemoveRequest, O: CommandReply },
    { name: "Update", options: {}, I: UpdateRequest, O: CommandReply },
    { name: "InsertMany", options: {}, I: InsertManyRequest, O: CommandReply },
    { name: "RemoveAll", options: {}, I: RemoveAllRequest, O: CommandReply },
    { name: "ReplaceAll", options: {}, I: ReplaceAllRequest, O: CommandReply },
    { name: "ReadAll", options: {}, I: ReadAllRequest, O: ReadAllReply },
    { name: "SubscribeChange", serverStreaming: true, options: {}, I: SubscribeChangeRequest, O: ReadAllReply }
]);
