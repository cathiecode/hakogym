// @ts-nocheck
// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "file_persistance.proto" (package "has.filepersistance", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FilePersistance } from "./file_persistance";
import type { LoadRequest } from "./file_persistance";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommandReply } from "./file_persistance";
import type { SaveRequest } from "./file_persistance";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service has.filepersistance.FilePersistance
 */
export interface IFilePersistanceClient {
    /**
     * @generated from protobuf rpc: Save(has.filepersistance.SaveRequest) returns (has.filepersistance.CommandReply);
     */
    save(input: SaveRequest, options?: RpcOptions): UnaryCall<SaveRequest, CommandReply>;
    /**
     * @generated from protobuf rpc: Load(has.filepersistance.LoadRequest) returns (has.filepersistance.CommandReply);
     */
    load(input: LoadRequest, options?: RpcOptions): UnaryCall<LoadRequest, CommandReply>;
}
/**
 * @generated from protobuf service has.filepersistance.FilePersistance
 */
export class FilePersistanceClient implements IFilePersistanceClient, ServiceInfo {
    typeName = FilePersistance.typeName;
    methods = FilePersistance.methods;
    options = FilePersistance.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Save(has.filepersistance.SaveRequest) returns (has.filepersistance.CommandReply);
     */
    save(input: SaveRequest, options?: RpcOptions): UnaryCall<SaveRequest, CommandReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveRequest, CommandReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Load(has.filepersistance.LoadRequest) returns (has.filepersistance.CommandReply);
     */
    load(input: LoadRequest, options?: RpcOptions): UnaryCall<LoadRequest, CommandReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoadRequest, CommandReply>("unary", this._transport, method, opt, input);
    }
}
