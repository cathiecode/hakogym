// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "running_observer.proto" (package "has.runningobserver", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringValue } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message has.runningobserver.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: int64 start_at = 1;
     */
    startAt: bigint;
    /**
     * @generated from protobuf field: string meta = 2;
     */
    meta: string;
    /**
     * @generated from protobuf field: string id = 3;
     */
    id: string;
}
/**
 * @generated from protobuf message has.runningobserver.StartCommandRequest
 */
export interface StartCommandRequest {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
}
/**
 * @generated from protobuf message has.runningobserver.StopCommandRequest
 */
export interface StopCommandRequest {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: google.protobuf.StringValue id = 2;
     */
    id?: StringValue;
}
/**
 * @generated from protobuf message has.runningobserver.FlipRunningStateCommandRequest
 */
export interface FlipRunningStateCommandRequest {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
}
/**
 * @generated from protobuf message has.runningobserver.UpdateMetadataCommandRequest
 */
export interface UpdateMetadataCommandRequest {
    /**
     * @generated from protobuf field: int64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string metadata = 3;
     */
    metadata: string;
}
/**
 * @generated from protobuf message has.runningobserver.ReadAllRequest
 */
export interface ReadAllRequest {
}
/**
 * @generated from protobuf message has.runningobserver.SubscribeChangeRequest
 */
export interface SubscribeChangeRequest {
}
/**
 * @generated from protobuf message has.runningobserver.CommandReply
 */
export interface CommandReply {
}
/**
 * @generated from protobuf message has.runningobserver.ReadAllReply
 */
export interface ReadAllReply {
    /**
     * @generated from protobuf field: repeated has.runningobserver.Item item = 1;
     */
    item: Item[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("has.runningobserver.Item", [
            { no: 1, name: "start_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { startAt: 0n, meta: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_at */ 1:
                    message.startAt = reader.int64().toBigInt();
                    break;
                case /* string meta */ 2:
                    message.meta = reader.string();
                    break;
                case /* string id */ 3:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_at = 1; */
        if (message.startAt !== 0n)
            writer.tag(1, WireType.Varint).int64(message.startAt);
        /* string meta = 2; */
        if (message.meta !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.meta);
        /* string id = 3; */
        if (message.id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartCommandRequest$Type extends MessageType<StartCommandRequest> {
    constructor() {
        super("has.runningobserver.StartCommandRequest", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StartCommandRequest>): StartCommandRequest {
        const message = { timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartCommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartCommandRequest): StartCommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartCommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.StartCommandRequest
 */
export const StartCommandRequest = new StartCommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopCommandRequest$Type extends MessageType<StopCommandRequest> {
    constructor() {
        super("has.runningobserver.StopCommandRequest", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id", kind: "message", T: () => StringValue }
        ]);
    }
    create(value?: PartialMessage<StopCommandRequest>): StopCommandRequest {
        const message = { timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopCommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopCommandRequest): StopCommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.StringValue id */ 2:
                    message.id = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopCommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        /* google.protobuf.StringValue id = 2; */
        if (message.id)
            StringValue.internalBinaryWrite(message.id, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.StopCommandRequest
 */
export const StopCommandRequest = new StopCommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlipRunningStateCommandRequest$Type extends MessageType<FlipRunningStateCommandRequest> {
    constructor() {
        super("has.runningobserver.FlipRunningStateCommandRequest", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FlipRunningStateCommandRequest>): FlipRunningStateCommandRequest {
        const message = { timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlipRunningStateCommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlipRunningStateCommandRequest): FlipRunningStateCommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlipRunningStateCommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.FlipRunningStateCommandRequest
 */
export const FlipRunningStateCommandRequest = new FlipRunningStateCommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMetadataCommandRequest$Type extends MessageType<UpdateMetadataCommandRequest> {
    constructor() {
        super("has.runningobserver.UpdateMetadataCommandRequest", [
            { no: 1, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMetadataCommandRequest>): UpdateMetadataCommandRequest {
        const message = { timestamp: 0n, id: "", metadata: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateMetadataCommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMetadataCommandRequest): UpdateMetadataCommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timestamp */ 1:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string metadata */ 3:
                    message.metadata = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMetadataCommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timestamp);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string metadata = 3; */
        if (message.metadata !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.metadata);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.UpdateMetadataCommandRequest
 */
export const UpdateMetadataCommandRequest = new UpdateMetadataCommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadAllRequest$Type extends MessageType<ReadAllRequest> {
    constructor() {
        super("has.runningobserver.ReadAllRequest", []);
    }
    create(value?: PartialMessage<ReadAllRequest>): ReadAllRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadAllRequest): ReadAllRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReadAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.ReadAllRequest
 */
export const ReadAllRequest = new ReadAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChangeRequest$Type extends MessageType<SubscribeChangeRequest> {
    constructor() {
        super("has.runningobserver.SubscribeChangeRequest", []);
    }
    create(value?: PartialMessage<SubscribeChangeRequest>): SubscribeChangeRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeChangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChangeRequest): SubscribeChangeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SubscribeChangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.SubscribeChangeRequest
 */
export const SubscribeChangeRequest = new SubscribeChangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandReply$Type extends MessageType<CommandReply> {
    constructor() {
        super("has.runningobserver.CommandReply", []);
    }
    create(value?: PartialMessage<CommandReply>): CommandReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandReply): CommandReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.CommandReply
 */
export const CommandReply = new CommandReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadAllReply$Type extends MessageType<ReadAllReply> {
    constructor() {
        super("has.runningobserver.ReadAllReply", [
            { no: 1, name: "item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<ReadAllReply>): ReadAllReply {
        const message = { item: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadAllReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadAllReply): ReadAllReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated has.runningobserver.Item item */ 1:
                    message.item.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadAllReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated has.runningobserver.Item item = 1; */
        for (let i = 0; i < message.item.length; i++)
            Item.internalBinaryWrite(message.item[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.runningobserver.ReadAllReply
 */
export const ReadAllReply = new ReadAllReply$Type();
/**
 * @generated ServiceType for protobuf service has.runningobserver.RunningObserver
 */
export const RunningObserver = new ServiceType("has.runningobserver.RunningObserver", [
    { name: "Start", options: {}, I: StartCommandRequest, O: CommandReply },
    { name: "Stop", options: {}, I: StopCommandRequest, O: CommandReply },
    { name: "FlipRunningState", options: {}, I: FlipRunningStateCommandRequest, O: CommandReply },
    { name: "UpdateMetadata", options: {}, I: UpdateMetadataCommandRequest, O: CommandReply },
    { name: "ReadAll", options: {}, I: ReadAllRequest, O: ReadAllReply },
    { name: "SubscribeChange", serverStreaming: true, options: {}, I: SubscribeChangeRequest, O: ReadAllReply }
]);
