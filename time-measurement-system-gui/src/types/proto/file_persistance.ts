// @ts-nocheck
// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "file_persistance.proto" (package "has.filepersistance", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message has.filepersistance.SaveRequest
 */
export interface SaveRequest {
    /**
     * @generated from protobuf field: string file = 1;
     */
    file: string;
}
/**
 * @generated from protobuf message has.filepersistance.LoadRequest
 */
export interface LoadRequest {
    /**
     * @generated from protobuf field: string file = 1;
     */
    file: string;
}
/**
 * @generated from protobuf message has.filepersistance.CommandReply
 */
export interface CommandReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class SaveRequest$Type extends MessageType<SaveRequest> {
    constructor() {
        super("has.filepersistance.SaveRequest", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SaveRequest>): SaveRequest {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveRequest): SaveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.filepersistance.SaveRequest
 */
export const SaveRequest = new SaveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadRequest$Type extends MessageType<LoadRequest> {
    constructor() {
        super("has.filepersistance.LoadRequest", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadRequest>): LoadRequest {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadRequest): LoadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.filepersistance.LoadRequest
 */
export const LoadRequest = new LoadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandReply$Type extends MessageType<CommandReply> {
    constructor() {
        super("has.filepersistance.CommandReply", []);
    }
    create(value?: PartialMessage<CommandReply>): CommandReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandReply): CommandReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message has.filepersistance.CommandReply
 */
export const CommandReply = new CommandReply$Type();
/**
 * @generated ServiceType for protobuf service has.filepersistance.FilePersistance
 */
export const FilePersistance = new ServiceType("has.filepersistance.FilePersistance", [
    { name: "Save", options: {}, I: SaveRequest, O: CommandReply },
    { name: "Load", options: {}, I: LoadRequest, O: CommandReply }
]);
